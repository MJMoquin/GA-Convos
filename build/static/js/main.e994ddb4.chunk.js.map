{"version":3,"sources":["components/NavBar/NavBar.jsx","services/tokenService.js","services/userService.js","pages/LoginPage/LoginPage.jsx","components/SignupForm/SignupForm.jsx","pages/SignupPage/SignupPage.jsx","services/posts-api.js","pages/AddPost/AddPost.jsx","pages/PostList/PostList.jsx","pages/App/App.js","serviceWorker.js","index.js"],"names":["NavBar","user","handleLogout","nav","className","href","id","name","onClick","getToken","token","localStorage","getItem","JSON","parse","atob","split","exp","Date","now","removeItem","setToken","setItem","getUserFromToken","removeToken","signup","fetch","BASE_URL","method","headers","Headers","body","stringify","then","res","ok","json","Error","tokenService","getUser","logout","login","creds","LoginPage","state","email","pw","handleChange","e","setState","target","value","handleSubmit","a","preventDefault","userService","props","handleSignupOrLogin","history","push","alert","autocomplete","onSubmit","this","type","onChange","htmlFor","class","to","Component","SignupForm","password","passwordConf","updateMessage","message","disabled","isFormInvalid","SignupPage","msg","create","post","mode","AddPost","invalidForm","formData","title","description","formRef","React","createRef","handleAddPost","current","checkValidity","ref","required","PostList","posts","App","newPostData","postAPI","newPost","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"kXAqCeA,G,MAnCA,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aAChBC,EAAMF,EACV,oCACE,6BACE,yBAAKG,UAAU,eACb,uBAAGA,UAAU,gBAAgBC,KAAK,KAAlC,UACA,wBAAIC,GAAG,aAAaF,UAAU,SAC5B,4BAAI,uBAAGC,KAAK,cAAcD,UAAU,YAAhC,aACJ,4BAAI,uBAAGC,KAAK,aAAaD,UAAU,YAA/B,aACJ,4BAAI,uBAAGC,KAAK,IAAID,UAAU,YAAtB,YAA2CH,EAAKM,OACpD,4BAAI,uBAAGF,KAAK,IAAID,UAAU,WAAWI,QAASN,GAA1C,gBAMZ,oCACE,6BACE,yBAAKE,UAAU,eACb,uBAAGA,UAAU,gBAAgBC,KAAK,KAAlC,UACA,wBAAIC,GAAG,aAAaF,UAAU,SAC5B,4BAAI,uBAAGC,KAAK,SAASD,UAAU,YAA3B,WACJ,4BAAI,uBAAGC,KAAK,UAAUD,UAAU,YAA5B,gBAMZ,OACA,oCACGD,K,sBCnBP,SAASM,IACP,IAAIC,EAAQC,aAAaC,QAAQ,SAC7BF,IAEcG,KAAKC,MAAMC,KAAKL,EAAMM,MAAM,KAAK,KAErCC,IAAMC,KAAKC,MAAQ,MAC7BR,aAAaS,WAAW,SACxBV,EAAQ,OAGZ,OAAOA,EAOM,OACXW,SAhCJ,SAAkBX,GACVA,EACFC,aAAaW,QAAQ,QAASZ,GAE9BC,aAAaS,WAAW,UA6B1BX,WACAc,iBA1BJ,WACE,IAAMb,EAAQD,IACd,OAAOC,EAAQG,KAAKC,MAAMC,KAAKL,EAAMM,MAAM,KAAK,KAAKf,KAAO,MAyB1DuB,YARJ,WACIb,aAAaS,WAAW,WCeb,OACbK,OAzCF,SAAgBxB,GACd,OAAOyB,MAAMC,oBAAqB,CAChCC,OAAQ,OACRC,QAAS,IAAIC,QAAQ,CAAC,eAAgB,qBACtCC,KAAMlB,KAAKmB,UAAU/B,KAEtBgC,MAAK,SAAAC,GACJ,GAAIA,EAAIC,GAAI,OAAOD,EAAIE,OACvB,MAAM,IAAIC,MAAM,2BAGjBJ,MAAK,YAAgB,IAAbvB,EAAY,EAAZA,MACP4B,EAAajB,SAASX,OA8BxB6B,QAxBF,WACE,OAAOD,EAAaf,oBAwBpBiB,OArBF,WACEF,EAAad,eAqBbiB,MAlBF,SAAeC,GACb,OAAOhB,MAAMC,mBAAoB,CAC/BC,OAAQ,OACRC,QAAS,IAAIC,QAAQ,CAAC,eAAgB,qBACtCC,KAAMlB,KAAKmB,UAAUU,KAEtBT,MAAK,SAAAC,GAEJ,GAAIA,EAAIC,GAAI,OAAOD,EAAIE,OACvB,MAAM,IAAIC,MAAM,uBAEjBJ,MAAK,gBAAEvB,EAAF,EAAEA,MAAF,OAAa4B,EAAajB,SAASX,QCuB5BiC,E,4MAxDbC,MAAQ,CACNC,MAAO,GACPC,GAAI,I,EAGNC,aAAe,SAACC,GACd,EAAKC,SAAL,eAEGD,EAAEE,OAAO3C,KAAOyC,EAAEE,OAAOC,S,EAI9BC,a,uCAAe,WAAOJ,GAAP,SAAAK,EAAA,6DACbL,EAAEM,iBADW,kBAGLC,EAAYd,MAAM,EAAKG,OAHlB,OAKX,EAAKY,MAAMC,sBACX,EAAKD,MAAME,QAAQC,KAAK,KANb,gDASXC,MAAM,wBATK,yD,6GAcb,OACE,yBAAKxD,UAAU,aACb,sCACA,0BAAMA,UAAU,UAAUyD,aAAa,MAAMC,SAAUC,KAAKX,cAC1D,yBAAKhD,UAAU,OACb,yBAAKA,UAAU,uBACb,2BAAO4D,KAAK,OAAOH,aAAa,MAAMvD,GAAG,QAAQF,UAAU,SAAS+C,MAAOY,KAAKnB,MAAMC,MAAOtC,KAAK,QAAQ0D,SAAUF,KAAKhB,eACzH,2BAAOmB,QAAQ,SAAf,WAIJ,yBAAK9D,UAAU,OACb,yBAAKA,UAAU,uBACb,2BAAO4D,KAAK,WAAWH,aAAa,MAAMzD,UAAU,SAASE,GAAG,WAAW6C,MAAOY,KAAKnB,MAAME,GAAIvC,KAAK,KAAK0D,SAAUF,KAAKhB,eAC1H,2BAAOmB,QAAQ,YAAf,cAIJ,yBAAK9D,UAAU,OACb,yBAAKA,UAAU,WACb,4BAAQA,UAAU,aAAlB,SAAoC,uBAAG+D,MAAM,wBAAT,kBADtC,eAEE,kBAAC,IAAD,CAAM/D,UAAU,UAAUgE,GAAG,KAA7B,SAAuC,uBAAGD,MAAM,wBAAT,mB,GAjD7BE,aCyETC,E,4MAxEb1B,MAAQ,CACNrC,KAAM,GACNsC,MAAO,GACP0B,SAAU,GACVC,aAAc,I,EAGhBzB,aAAe,SAACC,GACd,EAAKQ,MAAMiB,cAAc,IACzB,EAAKxB,SAAL,eAEGD,EAAEE,OAAO3C,KAAOyC,EAAEE,OAAOC,S,EAI9BC,a,uCAAe,WAAOJ,GAAP,SAAAK,EAAA,6DACbL,EAAEM,iBADW,kBAGLC,EAAY9B,OAAO,EAAKmB,OAHnB,OAIX,EAAKY,MAAMC,sBACX,EAAKD,MAAME,QAAQC,KAAK,KALb,gDAQX,EAAKH,MAAMiB,cAAc,KAAIC,SARlB,yD,oHAab,QAASX,KAAKnB,MAAMrC,MAAQwD,KAAKnB,MAAMC,OAASkB,KAAKnB,MAAM2B,WAAaR,KAAKnB,MAAM4B,gB,+BAInF,OACE,6BACE,uCACA,0BAAMpE,UAAU,UAAUyD,aAAa,MAAMC,SAAUC,KAAKX,cAC1D,yBAAKhD,UAAU,OACb,yBAAKA,UAAU,uBACb,2BAAO4D,KAAK,OAAOH,aAAa,MAAMzD,UAAU,SAASE,GAAG,OAAO6C,MAAOY,KAAKnB,MAAMrC,KAAMA,KAAK,OAAO0D,SAAUF,KAAKhB,eACtH,2BAAOmB,QAAQ,QAAf,UAGJ,yBAAK9D,UAAU,OACb,yBAAKA,UAAU,uBACb,2BAAO4D,KAAK,OAAOH,aAAa,MAAMzD,UAAU,SAASE,GAAG,QAAQ6C,MAAOY,KAAKnB,MAAMC,MAAOtC,KAAK,QAAQ0D,SAAUF,KAAKhB,eACzH,2BAAOmB,QAAQ,SAAf,WAGJ,yBAAK9D,UAAU,OACb,yBAAKA,UAAU,uBACb,2BAAO4D,KAAK,WAAWH,aAAa,MAAMzD,UAAU,SAASE,GAAG,WAAW6C,MAAOY,KAAKnB,MAAM2B,SAAUhE,KAAK,WAAW0D,SAAUF,KAAKhB,eACtI,2BAAOmB,QAAQ,YAAf,cAGJ,yBAAK9D,UAAU,OACb,yBAAKA,UAAU,uBACb,2BAAO4D,KAAK,WAAWH,aAAa,MAAMzD,UAAU,SAASE,GAAG,UAAU6C,MAAOY,KAAKnB,MAAM4B,aAAcjE,KAAK,eAAe0D,SAAUF,KAAKhB,eAC7I,2BAAOmB,QAAQ,WAAf,sBAGJ,yBAAK9D,UAAU,cACb,yBAAKA,UAAU,yBACb,4BAAQA,UAAU,YAAYuE,SAAUZ,KAAKa,iBAA7C,UAAqE,uBAAGT,MAAM,wBAAT,eADvE,WAEE,kBAAC,IAAD,CAAM/D,UAAU,UAAUgE,GAAG,KAA7B,SAAuC,uBAAGD,MAAM,wBAAT,mB,GAjE5BE,aCoBVQ,G,wDAnBb,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IAIRiB,cAAgB,SAACK,GACf,EAAK7B,SAAS,CAACyB,QAASI,KAJxB,EAAKlC,MAAQ,CAAC8B,QAAS,IAFN,E,qDAUjB,OACE,yBAAKtE,UAAU,cACb,kBAAC,EAAD,iBAAgB2D,KAAKP,MAArB,CAA4BiB,cAAeV,KAAKU,iBAChD,2BAAIV,KAAKnB,MAAM8B,c,GAdEL,cCMlB,SAASU,EAAOC,GACnB,OAAOtD,MAVM,cAUU,CACnBE,OAAQ,OACRC,QAAS,CAAC,eAAgB,mBAAoB,cAAiB,UAAYS,EAAa7B,YACxFsB,KAAMlB,KAAKmB,UAAUgD,IACtB,CAACC,KAAM,SACThD,MAAK,SAAAC,GAAG,OAAIA,EAAIE,U,YCdA8C,E,4MACnBtC,MAAQ,CACNuC,aAAa,EACTC,SAAU,CACNC,MAAO,GACPC,YAAa,K,EAIvBC,QAAUC,IAAMC,Y,EAEdrC,aAAe,SAAAJ,GACXA,EAAEM,iBACF,EAAKE,MAAMkC,cAAc,EAAK9C,MAAMwC,W,EAGxCrC,aAAe,SAAAC,GACX,IAAMoC,EAAQ,2BAAO,EAAKxC,MAAMwC,UAAlB,kBAA6BpC,EAAEE,OAAO3C,KAAOyC,EAAEE,OAAOC,QACpE,EAAKF,SAAS,CACdmC,WACAD,aAAc,EAAKI,QAAQI,QAAQC,mB,uDAKrC,OACE,oCACE,yBAAKxF,UAAU,WACb,0BAAMA,UAAU,uBAAuByF,IAAK9B,KAAKwB,QAASzB,SAAUC,KAAKX,cACvE,yBAAKhD,UAAU,OACb,yBAAKA,UAAU,gCACb,2BACEG,KAAK,QACLD,GAAG,aACH0D,KAAK,OACLb,MAAOY,KAAKnB,MAAMwC,SAASC,MAC3BpB,SAAUF,KAAKhB,aAAc+C,UAAQ,IAEvC,2BAAO5B,QAAQ,cAAf,gBAIJ,yBAAK9D,UAAU,OACb,yBAAKA,UAAU,gCACb,8BACEG,KAAK,cACLD,GAAG,cACH0D,KAAK,OACL5D,UAAU,uBACV+C,MAAOY,KAAKnB,MAAMwC,SAASE,YAC3BrB,SAAUF,KAAKhB,eAEjB,2BAAOmB,QAAQ,eAAf,iBAIJ,4BAAQF,KAAK,SAAS5D,UAAU,YAAYuE,SAAUZ,KAAKnB,MAAMuC,aAC/D,uBAAG/E,UAAU,uBAAb,OADF,e,GAxDuBiE,a,MCEtB,SAAS0B,EAASvC,GAC/B,OACE,oCACE,yBAAKpD,UAAU,iBACZoD,EAAMwC,Q,ICgEAC,E,4MA5DbrD,MAAQ,CACNoD,MAAO,GACP/F,KAAMsD,EAAYhB,W,EAGpBrC,aAAe,WACbqD,EAAYf,SACZ,EAAKS,SAAS,CAAEhD,KAAM,Q,EAGxBwD,oBAAsB,WACpB,EAAKR,SAAS,CAAChD,KAAMsD,EAAYhB,a,EAGnCmD,c,uCAAgB,WAAMQ,GAAN,eAAA7C,EAAA,sEACQ8C,EAAeD,GADvB,OACRE,EADQ,OAEd,EAAKnD,UAAS,SAAAL,GAAK,MAAK,CACtBoD,MAAM,GAAD,mBAAMpD,EAAMoD,OAAZ,CAAmBI,QACtB,kBAAM,EAAK5C,MAAME,QAAQC,KAAK,QAJpB,2C,wPHtBPjC,MAHM,cAGU,CACnBG,QAAS,CAAC,cAAiB,UAAYS,EAAa7B,aACrD,CAACwE,KAAM,SACThD,MAAK,SAAAC,GAAG,OAAIA,EAAIE,U,OG2BX4D,E,OACNjC,KAAKd,SAAS,CAAE+C,U,qIAGP,IAAD,OACR,OACE,oCACE,kBAAC,EAAD,CAAQ/F,KAAM8D,KAAKnB,MAAM3C,KAAMC,aAAc6D,KAAK7D,eAElD,kBAAC,IAAD,CAAOmG,OAAK,EAACC,KAAK,aAAaC,OAAQ,kBACrChD,EAAYhB,UAAY,kBAAC,EAAD,CAASmD,cAAiB,EAAKA,cAAezF,KAAM,EAAK2C,MAAM3C,OAAU,kBAAC,IAAD,CAAUmE,GAAG,cAGhH,kBAAC,IAAD,CAAOiC,OAAK,EAACC,KAAK,SAASC,OAAQ,kBACjC,kBAAC,EAAD,CACEP,MAAO,EAAKpD,MAAMoD,MAClB/F,KAAM,EAAK2C,MAAM3C,UAIrB,kBAAC,IAAD,CAAOoG,OAAK,EAACC,KAAK,UAAUC,OAAQ,gBAAG7C,EAAH,EAAGA,QAAH,OAClC,kBAAC,EAAD,CACEA,QAASA,EACTD,oBAAqB,EAAKA,yBAI9B,kBAAC,IAAD,CAAO4C,OAAK,EAACC,KAAK,SAASC,OAAQ,gBAAG7C,EAAH,EAAGA,QAAH,OACjC,kBAAC,EAAD,CACEA,QAASA,EACTD,oBAAqB,EAAKA,8B,GArDpBY,aCCEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASN,OACP,kBAAC,IAAD,KACE,kBAAC,IAAMO,WAAP,KACE,kBAAC,IAAD,CAAOP,OAAQ,gBAAE7C,EAAF,EAAEA,QAAF,OAAe,kBAAC,EAAD,CAAKA,QAASA,SAGhDqD,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlF,MAAK,SAAAmF,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM7C,c","file":"static/js/main.e994ddb4.chunk.js","sourcesContent":["import React from 'react';\n\nconst NavBar = ({ user, handleLogout }) => {\n    let nav = user ?\n    <>\n      <nav>\n        <div className=\"nav-wrapper\">\n          <a className=\"nav-logo left\" href=\"/\">ConvoS</a>\n          <ul id=\"nav-mobile\" className=\"right\">\n            <li><a href=\"/posts/user\" className=\"nav-link\">My Posts</a></li>\n            <li><a href=\"/posts/add\" className=\"nav-link\">New Post</a></li>\n            <li><a href=\" \" className=\"nav-link\">Welcome, {user.name}</a></li>\n            <li><a href=\" \" className=\"nav-link\" onClick={handleLogout}>Log Out</a></li>\n          </ul>\n        </div>\n      </nav>\n    </>\n    :\n    <>\n      <nav>\n        <div className=\"nav-wrapper\">\n          <a className=\"nav-logo left\" href=\"/\">Convos</a>\n          <ul id=\"nav-mobile\" className=\"right\">\n            <li><a href=\"/login\" className=\"nav-link\">Log In</a></li>\n            <li><a href=\"/signup\" className=\"nav-link\">Sign Up</a></li>\n          </ul>\n        </div>\n      </nav>\n    </>\n\n    return (\n    <>\n      {nav}\n    </>\n    )\n}\n\nexport default NavBar;","function setToken(token) {\n    if (token) {\n      localStorage.setItem('token', token);\n    } else {\n      localStorage.removeItem('token');\n    } \n  }\n  \nfunction getUserFromToken () {\n  const token = getToken();\n  return token ? JSON.parse(atob(token.split('.')[1])).user : null;\n}\n\nfunction getToken() {\n  let token = localStorage.getItem('token');\n  if (token) {\n    // Check if expired, remove if it is\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    // JWT's exp is expressed in seconds, not milliseconds, so convert\n    if (payload.exp < Date.now() / 1000) {\n      localStorage.removeItem('token');\n      token = null;\n    }\n  }\n  return token;\n}\n\nfunction removeToken() {\n    localStorage.removeItem('token');\n}\n\nexport default {\n    setToken,\n    getToken,\n    getUserFromToken,\n    removeToken,\n  };","import tokenService from '../services/tokenService';\nconst BASE_URL = '/api/users/';\n\nfunction signup(user) {\n  return fetch(BASE_URL + 'signup', {\n    method: 'POST',\n    headers: new Headers({'Content-Type': 'application/json'}),\n    body: JSON.stringify(user)\n  })\n  .then(res => {\n    if (res.ok) return res.json();\n    throw new Error('Email already taken!');\n  })\n  // Parameter destructuring!\n  .then(({ token }) => {\n    tokenService.setToken(token);\n  });\n  // the above could have been written as\n  //.then((token) => token.token);\n}\n\nfunction getUser() {\n  return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n  tokenService.removeToken();\n}\n\nfunction login(creds) {\n  return fetch(BASE_URL + 'login', {\n    method: 'POST',\n    headers: new Headers({'Content-Type': 'application/json'}),\n    body: JSON.stringify(creds)\n  })\n  .then(res => {\n    // Valid login if we have a status of 2xx (res.ok)\n    if (res.ok) return res.json();\n    throw new Error('Bad Credentials!');\n  })\n  .then(({token}) => tokenService.setToken(token));\n}\n\nexport default {\n  signup,\n  getUser,\n  logout,\n  login\n};","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './LoginPage.css';\nimport userService from '../../services/userService';\n\nclass LoginPage extends Component {\n  \n  state = {\n    email: '',\n    pw: ''\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      // Using ES2015 Computed Property Names\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      await userService.login(this.state);\n      // Let <App> know a user has signed up!\n      this.props.handleSignupOrLogin();\n      this.props.history.push('/');\n    } catch (err) {\n      // Use a modal or toast in your apps instead of alert\n      alert('Invalid Credentials!');\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"LoginPage\">\n        <h3>Log In</h3>\n        <form className=\"col s12\" autocomplete=\"off\" onSubmit={this.handleSubmit} >\n          <div className=\"row\">\n            <div className=\"input-field col s12\">\n              <input type=\"text\" autocomplete=\"off\" id=\"email\" className=\"active\" value={this.state.email} name=\"email\" onChange={this.handleChange} />\n              <label htmlFor=\"email\">Email</label>\n\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"input-field col s12\">\n              <input type=\"password\" autocomplete=\"off\" className=\"active\" id=\"password\" value={this.state.pw} name=\"pw\" onChange={this.handleChange} />\n              <label htmlFor=\"password\">Password</label>\n\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col s12\">\n              <button className=\"btn green\">Log In<i class=\"material-icons right\">arrow_forward</i></button>&nbsp;&nbsp;&nbsp;\n              <Link className=\"btn red\" to='/'>Cancel<i class=\"material-icons right\">cancel</i></Link>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default LoginPage;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport userService from '../../services/userService';\n\nclass SignupForm extends Component {\n\n  state = {\n    name: '',\n    email: '',\n    password: '',\n    passwordConf: ''\n  };\n\n  handleChange = (e) => {\n    this.props.updateMessage('');\n    this.setState({\n      // Using ES2015 Computed Property Names\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      await userService.signup(this.state);\n      this.props.handleSignupOrLogin();\n      this.props.history.push('/');\n    } catch (err) {\n      // Invalid user data (probably duplicate email)\n      this.props.updateMessage(err.message);\n    }\n  }\n\n  isFormInvalid() {\n    return !(this.state.name && this.state.email && this.state.password === this.state.passwordConf);\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Sign Up</h3>\n        <form className=\"col s12\" autocomplete=\"off\" onSubmit={this.handleSubmit} >\n          <div className=\"row\">\n            <div className=\"input-field col s12\">\n              <input type=\"text\" autocomplete=\"off\" className=\"active\" id=\"name\" value={this.state.name} name=\"name\" onChange={this.handleChange} />\n              <label htmlFor=\"name\">Name</label>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"input-field col s12\">\n              <input type=\"text\" autocomplete=\"off\" className=\"active\" id=\"email\" value={this.state.email} name=\"email\" onChange={this.handleChange} />\n              <label htmlFor=\"email\">Email</label>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"input-field col s12\">\n              <input type=\"password\" autocomplete=\"off\" className=\"active\" id=\"password\" value={this.state.password} name=\"password\" onChange={this.handleChange} />\n              <label htmlFor=\"password\">Password</label>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"input-field col s12\">\n              <input type=\"password\" autocomplete=\"off\" className=\"active\" id=\"confirm\" value={this.state.passwordConf} name=\"passwordConf\" onChange={this.handleChange} />\n              <label htmlFor=\"confirm\">Confirm Password</label>\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <div className=\"col-sm-12 text-center\">\n              <button className=\"btn green\" disabled={this.isFormInvalid()}>Sign Up<i class=\"material-icons right\">person_add</i></button>&nbsp;&nbsp;\n              <Link className=\"btn red\" to='/'>Cancel<i class=\"material-icons right\">cancel</i></Link>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SignupForm;\n","import React, { Component } from 'react';\nimport SignupForm from '../../components/SignupForm/SignupForm';\nimport './SignupPage.css';\n\nclass SignupPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {message: ''}\n  }\n\n  updateMessage = (msg) => {\n    this.setState({message: msg});\n  }\n\n  render() {\n    return (\n      <div className='SignupPage'>\n        <SignupForm {...this.props} updateMessage={this.updateMessage} />\n        <p>{this.state.message}</p>\n      </div>\n    );\n  }\n}\n\nexport default SignupPage;","import tokenService from '../services/tokenService';\nconst BASE_URL = '/api/posts/';\n\nexport function getAll() {\n    return fetch(BASE_URL, {\n        headers: {'Authorization': 'Bearer ' + tokenService.getToken()}\n    }, {mode: \"cors\"})\n    .then(res => res.json())\n}\n\nexport function create(post) {\n    return fetch(BASE_URL, {\n        method: \"POST\",\n        headers: {'content-type': 'application/json', 'Authorization': 'Bearer ' + tokenService.getToken()},\n        body: JSON.stringify(post)\n    }, {mode: \"cors\"})\n    .then(res => res.json());\n}\n\nexport function deleteOne(id) {\n    return fetch(`${BASE_URL}${id}`, {\n        method: 'DELETE',\n        headers: {'Authorization': 'Bearer ' + tokenService.getToken()}\n    }, {mode: \"cors\"})\n    .then(res => res.json());\n}\n\nexport function update(post) {\n    return fetch(`${BASE_URL}${post._id}`, {\n        method: \"PUT\",\n        headers: {'content-type': 'application/json', 'Authorization': 'Bearer ' + tokenService.getToken()},\n        body: JSON.stringify(post)\n    }, {mode: \"cors\"})\n    .then(res => res.json());\n}\n","import React, { Component } from 'react'\n\nexport default class AddPost extends Component {\n  state = {\n    invalidForm: true,\n        formData: {\n            title: '',\n            description: ''\n        },\n  }\n\n  formRef = React.createRef();\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.handleAddPost(this.state.formData);\n      };\n\n    handleChange = e => {\n        const formData = {...this.state.formData, [e.target.name]: e.target.value};\n        this.setState({\n        formData,\n        invalidForm: !this.formRef.current.checkValidity()\n        });\n    };\n\n    render() {\n      return (\n        <>\n          <div className=\"AddPost\">\n            <form className=\"col s12 center-align\" ref={this.formRef} onSubmit={this.handleSubmit}>\n              <div className=\"row\">\n                <div className=\"input-field col s6 offset-s3\">\n                  <input \n                    name=\"title\" \n                    id=\"post_title\" \n                    type=\"text\"\n                    value={this.state.formData.title} \n                    onChange={this.handleChange} required \n                  />\n                  <label htmlFor=\"post_title\">Post Title</label>\n                </div>\n              </div>\n                \n              <div className=\"row\">\n                <div className=\"input-field col s6 offset-s3\">\n                  <textarea \n                    name=\"description\" \n                    id=\"description\" \n                    type=\"text\" \n                    className=\"materialize-textarea\" \n                    value={this.state.formData.description} \n                    onChange={this.handleChange}\n                  />\n                  <label htmlFor=\"description\">Description</label>\n                </div>\n              </div>\n                \n              <button type=\"submit\" className=\"btn green\" disabled={this.state.invalidForm}>\n                <i className=\"material-icons left\">add</i>\n                Post\n              </button>                           \n            </form>\n          </div>\n        </>\n      )\n  }\n}","import React from 'react';\n// import PostCard from '../../components/PostCard/PostCard';\nimport './PostList.css';\n\nexport default function PostList(props) {\n  return (\n    <> \n      <div className='PostList-grid'>\n        {props.posts}\n      </div>\n    </>\n  );\n}","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom'\nimport './App.css';\nimport NavBar from '../../components/NavBar/NavBar';\nimport LoginPage from '../LoginPage/LoginPage';\nimport SignupPage from '../SignupPage/SignupPage';\nimport userService from '../../services/userService';\nimport * as postAPI from '../../services/posts-api';\nimport AddPost from '../AddPost/AddPost'\nimport PostList from '../PostList/PostList'\n\nclass App extends Component {\n  state = {\n    posts: [],\n    user: userService.getUser()\n  }\n\n  handleLogout = () => {\n    userService.logout();\n    this.setState({ user: null });\n  }\n\n  handleSignupOrLogin = () => {\n    this.setState({user: userService.getUser()});\n  }\n\n  handleAddPost = async newPostData => {\n    const newPost = await postAPI.create(newPostData);\n    this.setState(state => ({\n      posts: [...state.posts, newPost]\n    }), () => this.props.history.push('/'));\n  }\n\n  async componentDidMount() {\n    const posts = await postAPI.getAll();\n    this.setState({ posts })\n  }\n\n  render () {\n    return (\n      <>\n        <NavBar user={this.state.user} handleLogout={this.handleLogout}/>\n\n        <Route exact path='/posts/add' render={() => \n          userService.getUser() ? <AddPost handleAddPost = {this.handleAddPost} user={this.state.user}/> : <Redirect to='/login' />\n        }/>\n\n        <Route exact path='/posts' render={() => \n          <PostList \n            posts={this.state.posts} \n            user={this.state.user} \n          />\n        }/>\n\n        <Route exact path='/signup' render={({ history }) => \n          <SignupPage \n            history={history} \n            handleSignupOrLogin={this.handleSignupOrLogin}\n          />\n        }/>\n        \n        <Route exact path='/login' render={({ history }) => \n          <LoginPage \n            history={history} \n            handleSignupOrLogin={this.handleSignupOrLogin}\n          />\n        }/>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/App/App';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <React.StrictMode>\n      <Route render={({history}) => <App history={history} />} />\n    </React.StrictMode>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}